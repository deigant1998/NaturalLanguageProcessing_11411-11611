# -*- coding: utf-8 -*-
"""QA-dev.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1gRLlwDLJnaQ0pVFgjCpW1dRTklkKKCcw
"""

import datasets as ds

import pandas as pd
from transformers import (
    GPT2LMHeadModel,
    GPT2Tokenizer,
    AutoTokenizer,
    AutoModelWithLMHead,
    pipeline,
    AutoModelForSeq2SeqLM,
    DataCollatorForSeq2Seq,
    Seq2SeqTrainingArguments,
    Seq2SeqTrainer
)
import nltk
import numpy as np
import random
import torch
from torch.utils.data import Dataset, DataLoader
from transformers import GPT2Tokenizer, GPT2LMHeadModel, AdamW, get_linear_schedule_with_warmup
from datasets import load_dataset, load_metric
from tqdm import tqdm, trange
import torch.nn.functional as F
import csv

"""### Log in to Hugging Face Hub"""

from huggingface_hub import notebook_login

notebook_login()

"""### **T5 Fine-Tuning**

#### Load Dataset
"""

### Prepare data
question_data = pd.read_excel('context-dataset.xlsx')

metric = ds.load_metric("rouge")

"""#### Preprocess and create the dataset"""

def create_data_cols(data):
  for idx, row in data.iterrows():
    relevant_idxs = [int(x) for x in str(row["Valid Sentences"]).split(",")]
    sentences = row["Passage (10 sentences)"].split("\n")

    relevant_sentences = [sentences[i] for i in relevant_idxs]

    context = str(" ".join(relevant_sentences))
    
    data.at[idx, "context"] = context

    data.at[idx, "prompt"] = f'question: {row["question"]} context:{context}'

  return data

question_data = create_data_cols(question_data)
question_data["answer"] = question_data["answer"].map(str)

question_data

qa_dataset_all: ds.Dataset = ds.Dataset.from_pandas(
    question_data[["prompt", "answer"]]
)

qa_datasets: ds.DatasetDict = ds.DatasetDict({
    "train": ds.Dataset.from_dict(qa_dataset_all[:240]),
    "validation": ds.Dataset.from_dict(qa_dataset_all[240:270]),
    "test": ds.Dataset.from_dict(qa_dataset_all[270:]),
})

"""#### Tokenize the dataset"""

model_checkpoint = "t5-base"

tokenizer = AutoTokenizer.from_pretrained(model_checkpoint)

max_input_length = 1024
max_target_length = 64

def preprocess_function(examples):
    inputs = examples["prompt"]
    model_inputs = tokenizer(inputs, max_length=max_input_length, truncation=True)

    # Setup the tokenizer for targets
    with tokenizer.as_target_tokenizer():
        labels = tokenizer(examples["answer"], max_length=max_target_length, truncation=True)

    model_inputs["labels"] = labels["input_ids"]
    return model_inputs

tokenized_datasets = qa_datasets.map(preprocess_function, batched=True)

"""#### Load Model"""

# from transformers import (
#     AutoModelForQuestionAnswering,
#     T5ForConditionalGeneration,
#     DefaultDataCollator,
#     Seq2SeqTrainingArguments
# )

# model = T5ForConditionalGeneration.from_pretrained(model_checkpoint)
model = AutoModelForSeq2SeqLM.from_pretrained(model_checkpoint)

"""#### Fine-Tuning Params"""

batch_size = 4
model_name = model_checkpoint.split("/")[-1]
args = Seq2SeqTrainingArguments(
    f"{model_name}-finetuned-context-dataset",
    evaluation_strategy = "epoch",
    learning_rate=2e-5,
    per_device_train_batch_size=batch_size,
    per_device_eval_batch_size=batch_size,
    weight_decay=0.01,
    save_total_limit=3,
    num_train_epochs=3,
    predict_with_generate=True,
    fp16=True,
    push_to_hub=True,
)

data_collator = DataCollatorForSeq2Seq(tokenizer, model=model)

nltk.download("punkt")

def compute_metrics(eval_pred):
    predictions, labels = eval_pred
    decoded_preds = tokenizer.batch_decode(predictions, skip_special_tokens=True)
    # Replace -100 in the labels as we can't decode them.
    labels = np.where(labels != -100, labels, tokenizer.pad_token_id)
    decoded_labels = tokenizer.batch_decode(labels, skip_special_tokens=True)
    
    # Rouge expects a newline after each sentence
    decoded_preds = ["\n".join(nltk.sent_tokenize(pred.strip())) for pred in decoded_preds]
    decoded_labels = ["\n".join(nltk.sent_tokenize(label.strip())) for label in decoded_labels]
    
    result = metric.compute(predictions=decoded_preds, references=decoded_labels, use_stemmer=True)
    # Extract a few results
    result = {key: value.mid.fmeasure * 100 for key, value in result.items()}
    
    # # Add mean generated length
    # prediction_lens = [np.count_nonzero(pred != tokenizer.pad_token_id) for pred in predictions]
    # result["gen_len"] = np.mean(prediction_lens)
    
    return {k: round(v, 4) for k, v in result.items()}

"""#### Instantiate Trainer"""

trainer = Seq2SeqTrainer(
    model,
    args,
    train_dataset=tokenized_datasets["train"],
    eval_dataset=tokenized_datasets["validation"],
    data_collator=data_collator,
    tokenizer=tokenizer,
    compute_metrics=compute_metrics
)

trainer.train()

"""#### Push Trained Model to Hub"""

trainer.push_to_hub()