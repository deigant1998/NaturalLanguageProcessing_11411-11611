#!/usr/bin/env python3
import sys
from utils import FileRead
from question_generate import QuestionGenerate
from keyword_generate.KeywordGenerate import KeywordGenerate
from sentence_transformers import SentenceTransformer, util
from torch.nn import CosineSimilarity


file_reader = FileRead.FileReader()
question_generator = QuestionGenerate.QuestionGenerator()
sentence_embedding_model = SentenceTransformer('sentence-transformers/all-mpnet-base-v2')
cos_sim = CosineSimilarity(dim = 0)
#keywordGenerate = KeywordGenerate()

CONTEXT_LENGTH = 6;


if __name__ == "__main__":
    contextFile = sys.argv[1]
    nQuestions = (int)(sys.argv[2])
    
    sentences = file_reader.get_sentences(contextFile)
    
    num_questions_generated = 0;
    questions = []
    embeddings = []
    
    for j in range(5):
        CONTEXT_LENGTH -= j
        if(num_questions_generated == nQuestions):
            break;
        for i in range(0, len(sentences) - CONTEXT_LENGTH, CONTEXT_LENGTH):
            relevant_sentences = ".".join(sentences[i : i + CONTEXT_LENGTH]);
            #keywords = keywordGenerate.get_keywords(relevant_sentences)
            question = question_generator.generate_question(relevant_sentences);
            
            if len(question) == 0:
                continue
            
            if(len(question.split(' ')) >= 2 and (question.split(' ')[0].lower() == "question:" or question.split(' ')[0].lower() == "answer:")):
                question = question.split(' ', 1)[1]
                
            if(question[0] == "?"):
                question = question[1:]
                
            if(question[-1] != '?' or question in questions):
                continue
            
            if len(question.strip()) == 0:
                continue
            
            question_embedding = sentence_embedding_model.encode(question, convert_to_tensor=True)
            question_too_similar = False
            
            for embedding in embeddings:
                similarity = cos_sim(embedding, question_embedding)
                if(similarity > 0.8):
                    question_too_similar = True
                    break
                    
            if(question_too_similar):
                continue
            
            print(question.strip())
            questions.append(question)
            embeddings.append(question_embedding)
            num_questions_generated += 1;
            if(num_questions_generated == nQuestions):
                break;
        
        
    
    
     
